# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/stretch64"
  config.vm.hostname = "ansiblesrv"
  config.vm.define "ansiblesrv"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.56.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../data_ansible", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.name = "ansiblesrv"
	 vb.memory = "256"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
     echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main" >> /etc/apt/sources.list
     apt-get install dirmngr
     apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367
     apt-get update
     apt-get install --allow-unauthenticated -y vim python-jinja2 python-yaml \
						    python-paramiko sshpass \
						    python-setuptools python-crypto \
						    python-six python-httplib2 ansible
     cp /usr/share/vim/vim??/vimrc_example.vim /root/.vimrc
     echo -e "syntax on\ncolorscheme desert\nautocmd FileType yaml setlocal et ts=2 ai sw=2 nu sts=0\nset cursorline\nset number" >> /root/.vimrc
     rm -vf /etc/ansible
     cp -Rv /vagrant_data/ansible /etc
     echo "192.168.56.11 webserver" >> /etc/hosts
     echo "192.168.56.12 databaseserver" >> /etc/hosts
     sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
     service ssh reload
     echo -e "123\n123\n" | passwd vagrant
     sudo -u vagrant bash -c "ssh-keygen -f /home/vagrant/.ssh/id_rsa -N ''"
     echo "123" > /home/vagrant/sshpass.txt
     sudo -u vagrant sshpass -f /home/vagrant/sshpass.txt ssh-copy-id -o "StrictHostKeyChecking no" vagrant@192.168.56.11
     sudo -u vagrant sshpass -f /home/vagrant/sshpass.txt ssh-copy-id -o "StrictHostKeyChecking no" vagrant@192.168.56.12
  SHELL
end
